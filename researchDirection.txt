Lit review
	The barriers to entry in open source
	Wu Yu penn state
		Github awesome-ios
	Consuming open source
	Cyber learning
		Rich examples resource
		Iron curtain to learners
			example difficulties of joining a community and understanding what's going on
		Unlock the curtain, now what

Scratch environment
	mako hill, andreas shaw, mitch resnick scratch

how do people learn by resharing

what is the state of the art in pro examples
	maybe we never have 
	curated cases


organizational methods




- Identify research questions
    Can learning examples be generated from professional websites?
    How can relationships between the DOM and JS be better visualized?
    What affordances can provide better understanding of runtime JS info?

- Identify target contributions



- Pilot study - inform the design

    3 developers talk-aloud
    Create a learning fiddle with Ibex
        http://www.ted.com/
        https://www.dropbox.com/guide/business/highlights/getting-started/
        http://www.squarespace.com/seven/interface

    Observe, quote
    What tools used?


https://localhost:3001/instrument?url=https%3A%2F%2Fwww.tumblr.com%2F&html=true&basePath=https%3A%2F%2Fwww.tumblr.com%2F
https://localhost:3001/instrument?url=http%3A%2F%2Fwww.squarespace.com%2Fseâ€¦ce&html=true&basePath=http%3A%2F%2Fwww.squarespace.com%2Fseven%2Finterface






User problem
    Professional websites serve the pinnacle of examples: working maintained production code customized for its context
    Unravel's pilot study showed us that users copy and paste code from finished websites to recreate their functionality.
    The context of web tutorials doesn't clearly translate to teaching about customized examples on cool websites.
    Users desire to learn how to create functionality they encounter across the web, but inspection and reverse engineering is too overwhelming
    Unravel showed success in giving a starting point to users, but wasn't clear about the rest of the implementation
    Existing debugging inspection tools, and even unravel show either too much or too little of the picture

Research Questions (pre test 1)
    How can we extract JS/HTML/CSS examples from professional websites?
    How can we display information in extracted examples to aid learning for intermediate users?
    How do the extracted examples affect user understanding of a page compared to CDT or Unravel?
    Does Ibex alter an intermediate user's example-creation strategy for a professional website?

Ibex Proto 1 Design

    Design a proto that can extract source trace info from any public website (whether it requires auth or not)
        --> tutorial context problem
    Create a platform to highlight all code executed, showing more than just the starting point.
        Provide the whole JS/CSS/HTML context together for clear inspection
        --> inefficient copy paste all code problem
    Use platform agnostic techniques to cater to the expansive web
        --> user's desire to learn everywhere problem
    Provide reduction affordances to whittle away obvious library and dead code to help the user overcome entry barriers
        --> overcome too much / too little info barriers

Test: 3 devs with more xp than novice and less than experts
    https://getbootstrap.com/examples/carousel/
    twitter.com/y3sh autocomplete

Research Video Analysis: Bootstrap Carousel, and Twitter's Autocomplete
    UX
        Henry:
            Installing tracer is odd workflow
            Interface takes a lot of explaining
            Why is code highlighted yellow after hiding inactive code?
            Even in the active code, there is still a lot to go through
            User didn't hide jQuery or holder.js, very distracting, hid them later


            "there's tens of thousands of lines of code, i'm not going to scroll through it all to find what i need"
            "i wish the JS wasn't obfuscated; in the html it's pretty simple to see functionality"
            "difficult to understand compressed uglification expressions"
                ternary
                !0 for true
                !1 for false
                void 0

            Not confident enough to delete lines of code
            "It's not really useful to show jquery at all, the common web developer doesn't care about library internals"
        Sarah:
            Started from HTML, wanted to see links between the two
            Hide inactive code is confusing, just show the relevant code
            We can't just a pull a component out and reuse it yet
        Kevin:
            A lot here that I'm not sure what it means
            None of the variable names mean anything
            Gives part of the picture (e.g. gets the item for something, manipulates the object some other way)
            Want to see actions attached to HTML
            Want to fold/hide functions I've already looked at
            Want to get to core of what the interaction is

    UI
        Henry:
            Identify what's modifying the DOM
            Identify where event handlers are registered
            Identify triggers from JS and from HTML

        Sarah:
            Keep it to a few hundred lines max
            The functions I care about were called way fewer times than util functions (may be more relevant)
            Want IDE functionality, as its hard to keep track of where I am
        Kevin:
    Goals
        A - identified responsible sources
        B - understand what's happening
        C - create an example

    I wish
        Henry:
            I could see links between the HTML and JS, want to begin from HTML because I understand it
            I could see calls populate live when I interact on the web page
            Library/Infrastructure code was hidden for me
            I could see what was going on when installing the tracing
        Sarah:
            I could bookmark interesting parts, mark relevance in the gutter
            I could see functions of interest related to HTML
            I could click on something and see all other references
            I could play with the code that alters the existing web page, delete and modify
            I could whittle this down to only the relevant bits
            I could trace the order of things happening
            I could see realtime routes through the code
        Kevin
            ditto

    Externalities
        Show lib authors how their toolkits are being used

    Ideas
        Make ibex into remote debugging server

Ibex Proto 1 wins
    "I can finally see everything that happened, but I don't know what it means"

Ibex Proto 1 New Problems
    Users couldn't clearly find entry points to inspection (as in Unravel)
    The amount of active code is still overwhelming with internal library sources displayed
    The links between the DOM and JS were not clear
    CSS display is not helpful (maybe on animation styles should be displayed?)
        jquery toggle classes, JS modification of CSS attributes
        possible solution: tagging system, visualization linking effects through the output
    Output display is not helpful
        HTML --- JS
    Minification techniques cause confusion (e.g. void 0 or !0)
    Need more UI affordances to tell me what is most important
        folding to hide not important
        bookmarks to remember spots (e.g. ide overhead)
    Why does the rest of the page show up when all I care about is the carousel?
    Could we help the user know what variable names mean? (both obfuscated or defined)
        Variable evaluations over time (like debugging)
    Relating callcounts to handlers
    Could we work through the obfuscated variables to rename and define them?
        Variable name counts - as more clues

Research Questions (post test 1)
    How can we determine what source code was used during a UI behavior on a web page?
        Which extraction techniques help intermediate users overcome the limitations of minified code?
    How can we derive meaning from UI trace information while not introducing more barriers to learning?
        How can relationships between the DOM and JS be better visualized?
        What affordances aid an intermediate user's reverse engineering process for a pro site?

Design (post test 1)
    Interactive links between dom and js
    Bring back unravel entry points
    Default hide inactive and lib code
    Hide CSS & output for now
    Vote up/down sections of code
    Streamline tracing infra (auto trace and live feed as remote debugger)

Questions
    What are some ways to generate low fi protos?
        Test feature ideas w/out dev effort
        Sketch and storyboard interactions, broadly on paper

Unravel Timeline (adjust -2 days)
    Feb 2 - Mar 21
        BUILD
    March 21 - 25
        User Recruiting
        Study Design
    March 25
        Code Complete
    March 28 - Apr 4
        User Testing
        Data Collection
        Video Coding
    Apr 4 - Apr 11 (12-14 hour days)
        Data Statistics
        Related Work
        Paper
    Apr 12 - 13 (Who needs sleep)
        Video Demo
        Paper Revisions

Ibex Plan
    Jan. 20-30
        MAKE DESIGN
    Feb
        BUILD
        Paper Intro
    Mar 1-5
        Recruit
    Mar 6-19 hq away
        User Testing
         & related works
    Mar 20-26
        Video Coding
        Data Analysis
    Mar 27- April 8
        Write paper
    April 8- 13
        Revise Paper
        Video Demo
        Submit

Ibex Plan Actual
    Jan 18
        Pilot Study
    Jan. 20-30
        Design Iterations, Build
    Feb - Mar 14
        BUILD
        Paper Intro
    Mar 14 - 18
        Build Features, Fixes
    Mar 18
        Pilot Study 2
    Mar 19 - 25
        Perf Refactors
    Mar 25 - April 3
        Final Features, code complete
        Pro Sites Tests, Coding
    April 5
        Paper Outline, Formatting, Intro
    April 6
        System Description, Design Process, More Outlining
        Write paper
        Related work
        Recruit/Test
    April 8- 13
        Revise Paper
        Video Demo
        Submit

Prototype Feasibility Analysis

    User Problem Ties: High/Med/low
    Tech: Easy/Hard/Very Hard
    Wow: High/Med/Low

    (DONE) Auto Hide unimportant code
        User Problem Ties: High
        Tech: Easy
        Wow: Low

    (DONE) Highlight HTML based on JS traces
        User Problem Ties: High
        Tech: Hard
        Wow: Medium

    (DONE) Highlight JS based on HTML traces
        User Problem Ties: High
        Tech: Hard
        Wow: Medium

    (DONE) Highlight/ filter active HTML
        User Problem Ties: High
        Tech: Hard
        Wow: Medium

    (DONE) Unravel Trace Integration (e.g. highlight relevant points)
        User Problem Ties: High
        Tech: Easy
        Wow: Low
        Priority: provide a walkthrough -- wow there

    (DONE) Live Theseus From Pro Page to Fiddle
        User Problem Ties: Med
        Tech: Hard
        Wow: Med

    (DONE) Timeline Constraint of Effect Outcomes
        Without visual outcome
            User Problem Ties: High
            Tech: Hard
            Wow: Med

    (DONE) Highlight DOM Items on Inspection
        User Problem Ties: High
        Tech: Hard
        Wow: Med

    (PUNT) TimeLine Playback of Effect
        With visual outcome
            User Problem Ties: High
            Tech: Very Hard
            Wow: Very High
                Q: how much can we do with remote debugging in Chrome?

    (PUNT) HTML Tutorons
        User Problem Ties: Med
        Tech: Easy
        Wow: Low

    (PUNT) Code Behavior Decomposition Tagging
        (e.g. click handler, callback, dom change)
        User Problem Ties: Low
        Tech: Hard
        Wow: Med

    (PUNT) CSS Animation Effects
        User Problem Ties: Low
        Tech: Very Hard
        Wow: Low
        Priority: Backburner

    (PUNT) Vote up/down significant portions
        User Problem Ties: Med
        Tech: Hard
        Wow: Low
        Priority:

    (PUNT) Are two things related?
        Can I draw the Lines?

    Better Unminification Strategy

Ibex in a nutshell
    Helps developers who know at least the basics of JS/HTML/CSS recreate the UI behaviors they see.
        Features that enable the above:
            Showing them the relevant JS behind the interaction
                Hiding unexecuted JS
                Unravel++
                    Difference: Unravel showed sortable list of code line pointers (hand off to chrome)
                    Ibex: Shows all the code in context, where you can inspect in the midst of all JS that was run, constrainable
                        all JS is imported and constrainable
                            Perhaps assume experts can/have identified library sections of minified bundle
                        Follow-up study: what do users want to see (then ignore everything else)
                Additional constraints to hide libraries / sub functions

            Show relevant HTML/CSS
                Constrain to only relevant (hide all the crap)
                Drawing lines

            Showing them how the JS manipulates the HTML
                Drawing lines between JS and HTML nodes

            (Punt) Giving them a sandbox to play and modify the page

            Giving them navigable playback through JS exec with hiding features

Evaluation: Not binary
    Don't prove the statement
    How did it work? (Time difference) (Feasibility) (Quality)
    Tradeoff between time/cost


Claims

Hypotheses

Contributions
    Conceptual
        Show intermediate users how pro websites use js/html/css to create an effect

        Other than recreating the UI event, what other learning can take place with this tool?


    System: "On professional web pages":
        Shows me how relevant JS and HTML interact on a page
            *possibly add CSS links
            how they're connected to the visual renderigns on the page
        Allows user playback and interact
            Records interaction, whats happening on all three code bases
            Scopes/filters output
            Outputs a new spin on a fiddle
        Showing
            What Theseus can do
                But on pro websites/ public
                Call counts
            Dom query counts and linked to HTML

        Study
            What do the affordances allow users to do?
                Recreate UI feature implementation in visible code
                    Quicker to recreate
                    Quicker to understand
                    Better understanding of how feature works

                Pre-Post ask-then-test study
                    Giving people opportunity to overcoming the barriers to learn from code
                        Study design?
                        3 examples found
                            Post survey
                                On a scale of 1-7 how difficult
                                How willing are you to do that on a web page you cared about?

                    Ask about some features user's would like to learn about?
                        Pre-cache some examples




    Tech
        On-the-fly instrumentation
        Behavior-based code broadcasts
        Live-theseus integration from public websites
        Query-based Source linking (js-to-html-to-browser)

Pilot Study 2

    Jon
        Toy example & XKCD
            XKCD queries everything!

        Expanding views within JS don't really help
        Constrain more of HTML/JS
            Can you show just HTML structure only?

        Fix pausing and resuming functionality

        Outline the step-by-step nature of javascript
            Pains of looking through source code is to scroll here and there and go back and forth

        Select individual pills to narrow focus of the JS/HTML

        See call stacks in a better way

        Still too much information

    Kevin

        Toy example & XKCD

        I'm confused by overlapping interactions from components

        JS view doesn't make sense to me
            Lines aren't super obvious, need to be more pronounced
            JavaScript seems to be appended to the end of whats happening

    Sort JS calls bottom at top
    Sort JS by timestamp

    Two Sliders (time and detail)


Hq Test Affordances
    The bottom parts are actually readable instead of library code
        Identify un-minified parts!
    Yellow JS is most important
    Most important bits seem to be at the bottom
    Timestamps? When did these happen?

    Code calls that are near code in yellow
        Can we expand yellow views out to find related code?

    How do pro examples differ from ordinary user code?

Qualitative Study

    Here's a website, here's the code

    Start TElescope.. inspect... controls.
    What can you tell me about the way this feature was written?
    What coding design patterns can you identify?
    How is this way of implementing the feature different than how you might have?
        Nudge them to describe their approach
    Given a task where you were required to add X feature on site Y (different domain)

    How did Telescope help you understand this example and what's happening?
        I saw you were using feature X, what were you trying to accomplish?

    Which other websites and UI features would you like to use Telescope on?

    Do you see ways in which telescope can help you learn
        how would you see yourself using telescope
        now that you have the tool, what 

    If I launched this today, what are some things you could see yourself
        doing with it in the short term or long term?

10 Sites Measurments / Case studies

    How the HTML is manipulated by JavaScript
    What libarires they use
    How the code is organized
    How many button clicks did it take to get to the relevant part of code
        How obvious were the button clicks
    What similiarites exist between disparate implementations
    What is the ratio of libabry/utility code to useful code?
        60k vs 80
        on the page, telescope pull out, is or isn't library code, active code, its relevant

    At various levels of code views, how much can you understand?
        Generalized picture of code shrink/growth vs understand

    Success Cases and Failure Cases

    At what levels is the zooming/refining most useful


Qualitative Study Findings

    
    Greg 

        Adjustments to time
            0 > 3s
            0 > 3s
            3 > 0
            0 > 3
        Scrolls In JS
            3
        Amount of Code visible 
            130 loc
        JS Gutter Clicks 1
        HTML Gutter Clicks 0
        Notes
            "Is there a way to search?"
            "Is there a way to look at CSS"
            "Is there a way to look up variables?"
            "Even though its constrained it's still sort of overwhelming"
            Didn't know how XKCD map works
            Unsure if library or custom code
            "i can tell that jQuery is used a lot"
            "lots of specific hard-coded variables"
            "i don't really know how I would do it, but this way seems odd"
            "every time i open up soemthing like this to figure out how it works 
            its just a block of javascript or minified, so i don't even try, its
            not worth the time"

        Odd Uses
            Copied urls out of html for inspection

        Using for?
            I reverse engineer stuff like this a lot
            I like to take the bits and pieces of the site I use for
            I typically do this more with CSS, but I could see myself using this
            for JavaScript interaction design as well
            I struggle with knowing whether a cool interaction is supported by a library or is all custom code

    Leesha 

        Design: Abstraction of functions is helpful
        Seeing how updating is separated from dragging
        Its helpful to know how to structure code
        Used double constrain

        Using for?
            Reference and lifting out pieces I need, not copy paste

        Output caused some frustration

        Just starting out, I'm afraid to move it further out

        For more complex features I'd like to use this over an inspector
            "inspector's are good for simple things like css and attributes"
            "this would become my starting point over forums/tutorials"
            ""

    Nikhil - play-dot-to.com
        Adjustments to time
            0 > 80s
            0 > 90s
        Scrolls In JS
            10
        Amount of Code visible 
            130 loc
        JS Gutter Clicks 1
        HTML Gutter Clicks 8
        Watched HTML Changes

        Pause Interaction 2

        "I wish there was a way to play it back"
        "Can I see what was run inside the function?"
        "Where's the svg?"
        "Helpful to have an expert walk through"

        Found Mouseover

        Missed the setup code by skipping it out of habit

        Gives you a general idea of how things work apart from library code

        A lot of my front end questions are CSS'y than JS
            Here are what css classes triggered with x

        I'm not sure what happened at which second, so its difficult to constrain the time

        The detail helps alot
            I'm not sure when to use more detail vs less
            Once I found that raphael was being used, I wanted more detail to see how it was invoked

        "It's very cool, technically i'm impressed you can do this"

        ""

    Ryan - xkcd

        Adjustments to time
            1 to 6
        Scrolls In JS
            3
        Amount of Code visible 
            130 loc
        JS Gutter Clicks 1
        HTML Gutter Clicks 2
        Watched HTML Changes

        Pause Interaction 2

        "Can we use the native element highlighting from chrome?"
        "It looks like they're using jquery to insert HTML into the DOM"

        Found tiling concept

        The detail control is crazy because it lets me see what modified the dom or bring in the background code run

        Like the timeline because it lets me Separate those two totally distinct sets of calls apart 

        There was an interaction with a giant picture that I had no idea how to do it

        Found some odd code in tumblr, with random animation duration

        Replaces my workflow of inspecting some element and digging out 
            That has varying levels of success, i would do this instead
            I would use the page, wait, and adjust the sliders until I see what i want

    No users filtered scripts


    Sarah - xkcd

        Usage similar to Ryan

        Seeing only the relevant part makes it easy
        I can see there are just a bunch of tiles composed together that are calculated and loaded when need.

        It would help to see what new javascript was coming in over time

        "I would know how to apporach this problem design-wise" "I would have a map object with a drag event that modifies a coordinate system"

        assemble a map out of a bunch of tiles that are named accroding to the coordinates, capture the coordinates from the events and query the appropriate tile
            that's not something i would have known before

        "I haven't looked much at the HTML, so I'll start on that"

        I want to understand how functions relate to one another, i can see call counts changing and functions coming in over time

        I can see a function got called 100 times for one interaction, so I think that might be a utility

        I would not have known how to look at this if I was more novice-y

        I want to know how update effects one tile in the dom

        I would like to use this for websites with a functionaly scoped effect, like not facebook messenger, but maybe a drag-and-drop feature
            I would want to run telescope on the demo pages of libraries to understand how their written with a library
                so that i could know how to implement them without one

        This helps me mentally map and abstract concepts in JavaScript down to a specific implemention case
            I know how to do event handlers, queries, and syntax and JavaScript but I'm missing the "how" of making them work together for a feature like a draggable map.

        I see these components on a lot of websites and I think I know most of what it would require, but I don't know how to go about building it.

        I want to annotate or add comments to this


10 Site Case Study

    

    How the HTML is manipulated by JavaScript
    What Libraries they use
    How the code is organized
    How many button clicks did it take to get to the relevant part of code
        How obvious were the button clicks

    What similarities exist between disparate implementations

    What is the ratio of library/utility code to useful code?
        60k vs 80
        on the page, telescope pull out, is or isn't library code, active code, its relevant

    At various levels of code views, how much can you understand?
        Generalized picture of code shrink/growth vs understand

    Success Cases and Failure Cases

    At what levels is the zooming/refining most useful

    Success Cases

        xkcd.com/1110/
            From Startup
                11,000 lines unminified JS
                4730 dom modifier
                9,378 active js
                31 HTML Lines queried

            During Interaction
                49 dom modifier lines of non-library code
                165 dom modifier lines with library
                1079 active JS lines
                1 HTML Line queried

            Clicks
                One click to start and see setup code
                One click and drag to constrain time window 
                Scroll through JavaScript
                Clicked to see related HTML

            Interaction Methods Found
                update // alters map tile positions, loads new tiles
                drag   //

            Implementation Lesson
                To create a draggable map:
                    - Store initial user position
                    - Divide up super large image into grid of images
                    - Create start point in the grid and reveal to user
                    - Only load images in view or touching current view
                    - As the user drags, store new user position on map
                    - Update map tile position
                    - Load / unload surrounding tiles based on position and tile dimension

            4 HTML elements

        

    Failure Cases
        Mac Pro
        New York Times



















